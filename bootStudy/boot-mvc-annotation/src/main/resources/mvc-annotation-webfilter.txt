2019.6.6
    @WebFilter 注解学习
    1.@WebFilter 用于将一个类声明为过滤器，该注解将会在部署时被容器处理，容器将根据具体的属性配置将相应的类部署为过滤器。
    该注解具有下表给出的一些常用属性 ( 以下所有属性均为可选属性，但是 value、urlPatterns、servletNames 三者必需至少包含一个，
    且 value 和 urlPatterns 不能共存，如果同时指定，通常忽略 value 的取值 )：

    属性名	                            类型	                         描述
    filterName	                        String	                    指定过滤器的 name 属性，等价于 <filter-name>
    value	                            String[]	                该属性等价于 urlPatterns 属性。但是两者不应该同时使用。
    urlPatterns	                        String[]	                指定一组过滤器的 URL 匹配模式。等价于 <url-pattern> 标签。
    servletNames	                    String[]	                指定过滤器将应用于哪些 Servlet。取值是 @WebServlet 中的 name 属性的取值，或者是 web.xml 中 <servlet-name> 的取值。
    dispatcherTypes	                    DispatcherType	            指定过滤器的转发模式。具体取值包括：ASYNC、ERROR、FORWARD、INCLUDE、REQUEST。 <dispatcher>
    initParams	                        WebInitParam[]	            指定一组过滤器初始化参数，等价于 <init-param> 标签。
    asyncSupported	                    boolean	                    声明过滤器是否支持异步操作模式，等价于 <async-supported> 标签。
    description	                        String	                    该过滤器的描述信息，等价于 <description> 标签。
    displayName	                        String	                    该过滤器的显示名，通常配合工具使用，等价于 <display-name> 标签。

    REQUEST：当用户直接访问页面时，Web容器将会调用过滤器。如果目标资源是通过RequestDispatcher的include()或forward()方法访问时，那么该过滤器就不会被调用。
    INCLUDE：如果目标资源是通过RequestDispatcher的include()方法访问时，那么该过滤器将被调用。除此之外，该过滤器不会被调用。
    FORWARD：如果目标资源是通过RequestDispatcher的forward()方法访问时，那么该过滤器将被调用，除此之外，该过滤器不会被调用。
    ERROR：如果目标资源是通过声明式异常处理机制调用时，那么该过滤器将被调用。除此之外，过滤器不会被调用


    2. 示例：
    @WebFilter(servletNames = {"SimpleServlet"},
               filterName="SimpleFilter")
    public class LessThanSixFilter implements Filter{...}
    如此配置之后，就可以不必在 web.xml 中配置相应的 <filter> 和 <filter-mapping> 元素了，容器会在部署时根据指定的属性将该类发布为过滤器。它等价的 web.xml 中的配置形式为：

    <filter>
        <filter-name>SimpleFilter</filter-name>
        <filter-class>xxx</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>SimpleFilter</filter-name>
        <servlet-name>SimpleServlet</servlet-name>
    </filter-mapping>
    tomcat根据<filter-mapping>的顺序初始化Filter，由于上面的代码包含@WebFilter（"/CountFilter"),相当于在web.xml中对同一个过滤器
    CountFilter设置了两次<filter>和<filter-mapping>,故这个过滤器会初始化两次，故当@WebFilter设置的过滤器被初始化时，
    String param=getInitParameter（"count"）得到的字符串为空，调用Integer.parseInt(param)时引发NumberFormatException异常。
    去掉@WebFilter（"/CountFilter")后则一切正常。

    3.过滤器的urlPatterns的过滤路径规则：
        (1).全路径匹配： /abc/myServlet1.do
        (2).部分路径匹配： /abc/*
        (3).通配符匹配 ：/*
        (4).后缀名匹配 ：*.do (注意:前面不加/)

    4 注意 ：
        (1)@WebFilter(urlPatterns = "/lvjia/carbodyad/api/*", filterName = "rest0PubFilter")
        filterName的首字母一定要小写
        (2)
@ServletComponentScan   //Servlet、Filter、Listener 可以直接通过 @WebServlet、@WebFilter、@WebListener 注解自动注册，无需其他代码。
@ServletComponentScan(basePackages ="com.chuangxingu.boot.config.web")  一版配置在webConfig 上面


